#  Configuration For Development Profile

# App Configuration
app:
  name: Zovo
  port: 8080
  base-url: "http://localhost:${app.port}"

  redis:
    cache:
      ttls:
        default: 600    # 10 minutes
        two-fa: 300     # 5 minutes
        role: 3600      # 1 hour
    rate-limiting:
      max-attempts: 5
      window-seconds: 900  # 15 minutes

  oauth2:
    redirect-prefix: "http://localhost:3000/oauth/callback"

  security:
    bcrypt:
      strength: 10
    secrets:
      two-fa: ${TWO_FA_SECRET_KEY}

# Application Configuration
spring:
  application:
    name: ${app.name}

  # Database Configuration
  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${POSTGRES_URL}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    hikari:
      auto-commit: true
      transaction-isolation: TRANSACTION_READ_COMMITTED
      minimum-idle: 5
      maximum-pool-size: 20

  # JPA Configuration
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        connection:
          url: ${spring.datasource.url}
          driver_class: ${spring.datasource.driver-class-name}
          username: ${spring.datasource.username}
          password: ${spring.datasource.password}
          autocommit: ${spring.datasource.hikari.auto-commit}
          isolation: ${spring.datasource.hikari.transaction-isolation}
          pool_size: ${spring.datasource.hikari.maximum-pool-size}

  # Database Migration Configuration
  flyway:
    locations: classpath:db/migrations
    enabled: true
#    baseline-on-migrate: true # used for migrating existing databases

  # Output Configuration
  output:
    ansi:
      enabled: ALWAYS


  # SMTP Settings
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${SMTP_USERNAME}
    display-name: ${SMTP_DISPLAY_NAME}
    password: ${SMTP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  # Redis Configuration
  data:
    redis:
      host: localhost
      port: 6379
      password: ${REDIS_PASSWORD}
      timeout: 60000
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  # Redis Session Configuration
  session:
    redis:
      namespace: spring  # Optional prefix for session keys
      flush-mode: on-save        # Optional, when to flush to Redis

  # Redis Cache Type Configuration
  cache:
    type: redis

  # OAuth2 Security Configuration
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "${app.base-url}/api/v1/auth/oauth2/callback/google"
          github:
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            redirect-uri: "${app.base-url}/api/v1/auth/oauth2/callback/github"
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://openidconnect.googleapis.com/v1/userinfo
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user


# Server Configuration
server:
  port: ${app.port}
  servlet:
    session:
      timeout: 604800 # 7 days
      cookie:
        name: ZSESSIONID
        domain: localhost
        path: /
        max-age: 604800
        secure: false
        http-only: true
        same-site: lax
      tracking-modes: cookie

# Logging Configuration
logging:
  level:
    root: INFO
    org.springframework.security: TRACE
    org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
