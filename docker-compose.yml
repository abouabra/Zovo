services:
  frontend:
    container_name: frontend-container
    build:
      context: .
      dockerfile: infrastructure/frontend/Dockerfile
    ports:
      - "3000:3000"
    networks:
      - backend_network
    restart: always
    depends_on:
      - backend

  backend:
    container_name: backend-container
    build:
      context: .
      dockerfile: infrastructure/backend/Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - .env
    networks:
      - backend_network
    restart: always
    depends_on:
      - postgres
      - redis
      - minio

  nginx:
    container_name: nginx-container
    image: nginx:1.27.5-alpine
    ports:
      - "443:443"
      - "80:80"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/certs:/etc/nginx/certs:ro
    networks:
      - backend_network
    restart: always

  postgres:
    image: postgres:17.4
    container_name: postgres-container
    env_file:
      - .env
    # ports:
    #   - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - backend_network
    restart: always

  redis:
    image: redis:7.4.3
    container_name: redis-container
    # ports:
    #   - "6379:6379"
    networks:
      - backend_network
    volumes:
      - redis-data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--requirepass", "${REDIS_PASSWORD}"]
    env_file:
      - .env
    restart: always
  
  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z-cpuv1
    container_name: minio-container
    ports:
      # - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    env_file:
      - .env
    networks:
      - backend_network
    restart: always

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ./volumes/postgres
      o: bind

  redis-data:
    driver: local
    driver_opts:
      type: none
      device: ./volumes/redis
      o: bind
  
  minio-data:
    driver: local
    driver_opts:
      type: none
      device: ./volumes/minio
      o: bind

networks:
  backend_network:
    driver: bridge
